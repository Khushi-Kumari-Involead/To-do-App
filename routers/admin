from typing import Annotated
from sqlalchemy.orm import Session
from fastapi import APIRouter, Depends, HTTPException, status
from models import Todos, Users
from database import SessionLocal
from .auth import get_current_user

router = APIRouter(
    prefix='/admin',
    tags=['admin']
)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

db_dependency = Annotated[Session, Depends(get_db)]
user_dependency = Annotated[dict, Depends(get_current_user)]

@router.get("/todo", status_code= status.HTTP_200_OK)
async def read_all_todo(user: user_dependency, db: db_dependency):

    """
     This function is doing -- This function enables the admin 
     Args: username, password, db

     Returns: user (If user exists or if the authentication is successful,
                    False: If username or password is wrong)
      
    """
    if user is None or user.get('user_role') != 'admin':
        raise HTTPException(status_code=401, detail="Authentication Failed")
    return db.query(Todos).all()

@router.get("/user", status_code=status.HTTP_200_OK)
async def read_all_users(user: user_dependency, db: db_dependency):
    """
     This function is doing -- This function enables the admin to read all
                                users
     Args: user, db

     Returns: all users(if admin is authorized)
                raises HTTPException if not
      
    """
    if user is None or user.get('user_role') != 'admin':
        raise HTTPException(status_code=401, detail="Authentication failed")
    return db.query(Users).all()
